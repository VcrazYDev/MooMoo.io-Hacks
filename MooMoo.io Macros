// ==UserScript==
// @name         MooMoo.io â€“ Macro Placers
// @namespace    https://greasyfork.org/en/users/1064285-vcrazy-gaming
// @version      1
// @description  Q/F/V/N/H/G - Macro Placers.
// @author       _VcrazY_
// @match        *://*.moomoo.io/*
// @icon         https://moomoo.io/img/favicon.png?v=1
// @grant        none
// @require      https://update.greasyfork.org/scripts/423602/1005014/msgpack.js
// @license      MIT
// ==/UserScript==
document.querySelector("#pre-content-container").remove();
document.getElementById("enterGame").addEventListener("click", autohide);
function autohide() {
    document.getElementById("ot-sdk-btn-floating").hide();
}
let mouseX;
let mouseY;
let width;
let height;
let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");
var getNearEnemy;
var nearestEnemyAngle;
var checkEnemy;
var ws;
var msgpack5 = window.msgpack;
var boostDir;
let player = {};
document.msgpack = window.msgpack;

// define websocket
WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function (message) {
    if (!ws) {
        document.ws = this;
        ws = this;
        joinServer(this);
    }
    this.oldSend(message);
};
function joinServer(socket) {
    // Adding an event listener
    socket.addEventListener("message", function (message) {
        handleServerPackets(message);
    });
}
function handleServerPackets(message) {
    let tmpData = msgpack5.decode(new Uint8Array(message.data));
    let data;
    if (tmpData.length > 1) {
        data = [tmpData[0], ...tmpData[1]];
        if (data[1] instanceof Array) {
            data = data;
        }
    } else {
        data = tmpData;
    }
    let item = data[0];
    if (!data) {
        return;
    }
    switch (item) {
        case "io-init":
            {
                let gameCanvas = document.getElementById("gameCanvas");
                width = gameCanvas.clientWidth;
                height = gameCanvas.clientHeight;
                window.addEventListener("resize", function () {
                    width = gameCanvas.clientWidth;
                    height = gameCanvas.clientHeight;
                });
                gameCanvas.addEventListener("mousemove", event => {
                    mouseX = event.clientX;
                    mouseY = event.clientY;
                });
            }
            break;
        case "C":
            setupGame(data);
            break;
        case "a":
            updatePlayers(data);
            break;
    }
    cacheItems();
}
function sendPacket(packetName) {
    let content = Array.prototype.slice.call(arguments, 1);
    ws.send(msgpack5.encode([packetName, content]));
}
function sendPlace(id, angle) {
    let oldweaponIndex = player.weaponIndex;
    sendPacket("G", id, null);
    sendPacket("d", 1, angle);
    sendPacket("d", 0, angle);
    sendPacket("G", oldweaponIndex, true);
}
var repeater = function mockedDriverFn(element, method, options) {
    var d = ![];
    var e = undefined;
    return {
        start: function start(child) {
            if (child == element && document.activeElement.id.toLowerCase() !== "chatbox") {
                d = !![];
                if (e === undefined) {
                    e = setInterval(function () {
                        method();
                        if (!d) {
                            clearInterval(e);
                            e = undefined;
                            console.log("cleared");
                        }
                    }, options);
                }
            }
        },
        stop: function Chat(parent) {
            if (parent == element && document.activeElement.id.toLowerCase() !== "chatbox") {
                d = ![];
            }
        }
    };
};
function boostSpike() {
    boostDir = nearestEnemyAngle;
    sendPlace(player.inventory.spike, boostDir + UTILS.toRadians(90));
    sendPlace(player.inventory.spike, boostDir - UTILS.toRadians(90));
    sendPlace(player.inventory.trap, boostDir);
    sendPacket("a", boostDir);
}
var foodPlacer = repeater(81, function () {
    sendPlace(player.inventory.food);
}, 50);
var boostPlacer = repeater(70, function () {
    sendPlace(player.inventory.trap);
}, 50);
var spikePlacer = repeater(86, function () {
    sendPlace(player.inventory.spike);
}, 50);
var millPlacer = repeater(78, function () {
    sendPlace(player.inventory.mill);
}, 50);
var turretPlacer = repeater(72, function () {
    sendPlace(player.inventory.turret);
}, 50);
var boostSpiker = repeater(71, function () {
    sendPlace(boostSpike());
}, 150);
document.addEventListener("keydown", function (event) {
    foodPlacer.start(event.keyCode);
    boostPlacer.start(event.keyCode);
    spikePlacer.start(event.keyCode);
    millPlacer.start(event.keyCode);
    turretPlacer.start(event.keyCode);
    boostSpiker.start(event.keyCode);
});
document.addEventListener("keyup", function (event) {
    foodPlacer.stop(event.keyCode);
    turretPlacer.stop(event.keyCode);
    boostPlacer.stop(event.keyCode);
    spikePlacer.stop(event.keyCode);
    millPlacer.stop(event.keyCode);
    boostSpiker.stop(event.keyCode);
});
function isElementVisible(e) {
    return e.offsetParent !== null;
}
const UTILS = {
    toRadians: function (degree) {
        return degree * 0.01745329251;
    },
    getDistance: function (y1, y2, x1, x2) {
        return Math.sqrt(Math.pow(x1 - y1, 2) + Math.pow(x2 - y2, 2));
    },
    getDirection: function (y2, y1, x2, x1) {
        return Math.atan2(x1 - y1, x2 - y2);
    },
    atan2: function (y2, y1, x2, x1) {
        return Math.atan2(x1 - y1, x2 - y2);
    },
    dist: function (x1, y1, x2, y2) {
        return UTILS.getDistance(x1, y1, x2, y2);
    },
    distance: function (x1, y1, x2, y2) {
        return UTILS.getDistance(x1, y1, x2, y2);
    },
    angle: function (x1, y1, x2, y2) {
        return UTILS.atan2(x1, y1, x2 - y2);
    }
};
function cacheItems() {
    player.inventory = {};
    const items = [{
        category: "primary",
        start: 0,
        end: 9
    }, {
        category: "secondary",
        start: 9,
        end: 16
    }, {
        category: "food",
        start: 16,
        end: 19,
        subtract: true
    }, {
        category: "wall",
        start: 19,
        end: 22,
        subtract: true
    }, {
        category: "spike",
        start: 22,
        end: 26,
        subtract: true
    }, {
        category: "mill",
        start: 26,
        end: 29,
        subtract: true
    }, {
        category: "mine",
        start: 29,
        end: 31,
        subtract: true
    }, {
        category: "boostPad",
        start: 31,
        end: 33,
        subtract: true
    }, {
        category: "trap",
        start: 31,
        end: 33,
        subtract: true
    }, {
        category: "turret",
        start: 33,
        end: 39,
        subtract: true
    }, {
        category: "spawnPad",
        start: 36,
        end: 37,
        subtract: true
    }];
    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
        const {
            category,
            start,
            end,
            subtract
        } = items[itemIndex];
        for (let itemId = start; itemId < end; itemId++) {
            const actionBarItem = document.getElementById(`actionBarItem${itemId}`);
            if (actionBarItem && isElementVisible(actionBarItem)) {
                player.inventory[category] = subtract ? itemId - 16 : itemId;
                break;
            }
        }
    }
}
function setupGame(data) {
    if (player.sid == null) {
        player.sid = data[1];
    }
}
function updatePlayers(data) {
    checkEnemy = [];
    var f = 0;
    for (; f < data[1].length / 13; f++) {
        var object = data[1].slice(13 * f, 13 * f + 13);
        if (object[0] == player.sid) {
            player.x = object[1];
            player.y = object[2];
            player.dir = object[3];
            player.buildIndex = object[4];
            player.weaponIndex = object[5];
            player.team = object[7];
            player.isLeader = object[8];
            player.skinIndex = object[9];
            player.tailIndex = object[10];
            player.iconIndex = object[11];
        } else if (object[7] != player.team || object[7] === null) {
            checkEnemy.push(object);
            // returns an array of enemies
        }
    }
    if (checkEnemy) {
        getNearEnemy = checkEnemy.sort(function (tmp1, tmp2) {
            return UTILS.getDistance(tmp1[1], tmp1[2], player.y, player.x) - UTILS.getDistance(tmp2[1], tmp2[2], player.y, player.x);
        })[0];
        // returns the nearest enemy
    }
    if (getNearEnemy) {
        nearestEnemyAngle = UTILS.getDirection(player.x, player.y, getNearEnemy[1], getNearEnemy[2]);
        // returns the angle to the nearest enemy
    }
    if (!getNearEnemy) {
        nearestEnemyAngle = player.dir;
    }
}
